#!/bin/bash

set -e

progname=$(basename $0)
query=""
config_file="$HOME/.aws/$progname.config"
config_serial_number=""
serial_number=""
token_code=""

help () {
        cat <<EOF 1>&2
${progname} - Get aws session token using MFA

Usage: ${progname} [-i] [-c config] [-s serial_number [token_code]]

    -h                Show this help message
    -q                Query current session
    -c config_file    Configuration file (default: $config_file)
    -s serial_number  MFA device serial number
    token_code        One time MFA authentication code

With neither serial_number nor token_code, $progname
just prints the information for the current session, if
not expired.

When given a serial_number (using the command line option
or in interactive mode), then token_code must also be
provided on the command line or in interactive mode, and
both are passed to the "aws sts get-session-token" cli command.

The results of the aws cli command are stored in \$HOME/.aws/session-credentials
and they are used to update a "[session]" profile in \$HOME/.aws/credentials.
Finally, a sequence of shell commands is printed to set up environment variables.
See more on their usage below.

MFA serial_number:
    To get your MFA device serial number
    see https://awscli.amazonaws.com/v2/documentation/api/latest/reference/sts/get-session-token.html?highlight=--serial-number#options.

    The value is either the serial number for a hardware device (such as GAHT12345678 ) or
    an Amazon Resource Name (ARN) for a virtual device (such as arn:aws:iam::123456789012:mfa/user ).
    You can find the device for an IAM user by going to the AWS Management Console and viewing the userâ€™s security credentials.

MFA token_code:
    This is the one time 6-digit numerical code generated by the MFA device.

Configuration file: (default: $config_file)
    Used to store your user's MFA serial_number using the following syntax:
    serial_number = arn:aws:iam::123456789012:mfa/user

Using environment variable:
    $progname prints a series of shell commands to set environment variables. For example:

    export AWS_PROFILE=session
    export AWS_ACCESS_KEY_ID=foo
    export AWS_SECRET_ACCESS_KEY=bar
    export AWS_SESSION_TOKEN=zed

    You can use AWS_PROFILE=session alone to use the [session] profile information
    that the program sets in the credentials file.  For example:
        AWS_PROFILE=session scylla-s3-reloc -u

    Alternatively, you can set all AWS_{ACCESS_KEY_ID,SECRET_ACCESS_KEY,SESSION_TOKEN} environment variable
    to use the per-session keys.
EOF
        exit 1
}

while getopts ":qc:s:" opt; do
    case $opt in
        q)
            query=1;;
        c)
            config_file="${OPTARG}";;
        s)
            serial_number="${OPTARG}";;
        *)
            help;;
    esac
done
shift $((OPTIND-1))

token_code="$1"

cd ${HOME}/.aws

cmd="aws sts get-session-token"

if [ -f "${config_file}" ]; then
    config_serial_number=$(awk -F'[= \t]+' '$1 == "serial_number" { print $2; exit(0); }' ${config_file})
fi
if [ -z "${serial_number}" ]; then
    serial_number=${config_serial_number}
fi
if [ -z "${serial_number}" ] || [ -z "${query}" ]; then
    read -p "MFA Serial number: " -e -i "${serial_number}" serial_number
    if [ "${serial_number}" != "${config_serial_number}" ] && [ -n "${config_file}" ]; then
        save=Y
        [ -f "${config_file}" ] && read -p "Save serial number [Y/n]: " -e -i "Y" save
        if [[ "${save}" == [Yy] ]]; then
            echo -n > ${config_file}.new
            [ -f "${config_file}" ] && sed '/serial_number/d' ${config_file} > ${config_file}.new
            echo "serial_number = ${serial_number}" >> ${config_file}.new
            [ -f "${config_file}" ] && mv ${config_file} ${config_file}.bak
            mv ${config_file}.new ${config_file}
        fi
    fi
fi

if [ -z "${token_code}" ] && [ -z "${query}" ]; then
    read -p "MFA Token code: " -e -i "${token_code}" token_code
fi

if [ -n "${token_code}" ]; then
    [ -n "${serial_number}" ] && cmd="$cmd --serial-number ${serial_number}"
    cmd="$cmd --token-code ${token_code}"
fi

export -n AWS_PROFILE AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN
$cmd > session-credentials.new
#echo session-credentials.new:; cat session-credentials.new; echo

for key in AccessKeyId SecretAccessKey SessionToken; do
    eval ${key}=$(awk '/'${key}'/ { print $2 }' session-credentials.new | tr -d ',')
done

awk '/^$/ { next }
    /\[session\]/ {
        skip=1
        next
    }
    skip && /^\[/ {
        skip=0
    }
    skip { next }
    /^\[/ && NR > 1 { print "" }
    { print }' credentials > credentials.new

cat <<EOF >> credentials.new

[session]
aws_access_key_id=$AccessKeyId
aws_secret_access_key=$SecretAccessKey
aws_session_token=$SessionToken
EOF
#echo credentials.new:; cat credentials.new; echo

cat <<EOF
export AWS_PROFILE=session
export AWS_ACCESS_KEY_ID=$AccessKeyId
export AWS_SECRET_ACCESS_KEY=$SecretAccessKey
export AWS_SESSION_TOKEN=$SessionToken
EOF

for f in session-credentials credentials; do
    [ -f "${f}" ] && mv ${f} ${f}.bak
    mv ${f}.new ${f}
done
